// linear_congruential(a, x, c, m):
//   ((a * x) + c) % m
code := []int{
	// v1 := a * x
	ICONST,
	2,
	ICONST,
	18,
	IMUL,

	// v2 := v1 + c
	ICONST,
	3,
	IADD,

	// v2 % m
	ICONST,
	15,
	IDIV,

	POP,
	IPRINT,
}

fibonacci := []int{
	// fibonacci(n)
	// if n == 0: return 0
	ICONST, // 0
	0,      // 1
	LOAD,   // 2
	-3,     // 3
	IET,    // 4
	JNZ,    // 5
	32,     // 6

	// if n == 1: return 1
	ICONST, // 7
	1,      // 8
	LOAD,   // 9
	-3,     // 10
	IET,    // 11
	JNZ,    // 12
	35,     // 13

	// v1 := fib(n-1)
	ICONST, // 14
	1,      // 15
	LOAD,   // 16
	-3,     // 17
	ISUB,   // 18
	CALL,   // 19
	0,      // 20
	1,      // 21

	// v2 := fib(n-2)
	ICONST, // 22
	2,      // 23
	LOAD,   // 24
	-3,     // 25
	ISUB,   // 26
	CALL,   // 27
	0,      // 28
	1,      // 29

	// return v1 + v2
	IADD, // 30
	RET,  // 31

	// return 0
	ICONST, // 32
	0,      // 33
	RET,    // 34

	// return 1
	ICONST, // 35
	1,      // 36
	RET,    // 37

	// main()
	// i := 0
	ICONST, // 38
	0,      // 39
	MSTORE, // 40
	0,      // 41

	// while i < 10 {
	ICONST, // 42
	21,     // 43
	MLOAD,  // 44
	0,      // 45
	ILT,    // 46
	JZ,     // 47
	64,     // 48

	// fibonacci(n)
	MLOAD,  // 49
	0,      // 50
	CALL,   // 51
	0,      // 52
	1,      // 53
	IPRINT, // 54

	// i++
	MLOAD,  // 55
	0,      // 56
	ICONST, // 57
	1,      // 58
	IADD,   // 59
	MSTORE, // 60
	0,      // 61

	// }
	JMP, // 62
	42,  // 63

	// }
	EXIT, // 64
}

factorial := []int{
	// if N < 2 return 1
	LOAD,   // 0 - fact()
	-3,     // 1
	ICONST, // 2
	2,      // 3
	ILT,    // 4
	BRF,    // 5
	10,     // 6
	ICONST, // 7
	1,      // 8
	RET,    // 9

	// return N * fact(N-1)
	LOAD,   // 10
	-3,     // 11
	LOAD,   // 12
	-3,     // 13
	ICONST, // 14
	1,      // 15
	ISUB,   // 16
	CALL,   // 17
	0,      // 18
	1,      // 19
	IMUL,   // 20
	RET,    // 21

	// print fact(N)
	ICONST, // 22
	5,      // 23
	MSTORE, // 24
	0,      // 25
	MLOAD,  // 26
	0,      // 27
	CALL,   // 28
	0,      // 29
	1,      // 30
	IPRINT, // 31
	HALT,   // 32
}

adder := []int{
	LOAD, // 0
	-3,   // 1
	LOAD, // 2
	-4,   // 3
	IADD, // 4
	RET,  // 5

	ICONST, // 6
	1,      // 7
	ICONST, // 8
	1,      // 9
	CALL,   // 10
	0,      // 11
	2,      // 12
	IPRINT, // 13
	HALT,   // 14
}

// Hello World!
// 72 101 108 108 111 32 87 111 114 108 100 33
hellowordstring := []int{
	ICONST,
	72,
	MSTORE,
	0,
	ICONST,
	101,
	MSTORE,
	1,
	ICONST,
	108,
	MSTORE,
	2,
	ICONST,
	108,
	MSTORE,
	3,
	ICONST,
	111,
	MSTORE,
	4,
	ICONST,
	32,
	MSTORE,
	5,
	ICONST,
	87,
	MSTORE,
	6,
	ICONST,
	111,
	MSTORE,
	7,
	ICONST,
	114,
	MSTORE,
	9,
	ICONST,
	108,
	MSTORE,
	10,
	ICONST,
	100,
	MSTORE,
	11,
	ICONST,
	33,
	MSTORE,
	12,
	MLOAD,
	0,
	CPRINT,
	HALT,
}
